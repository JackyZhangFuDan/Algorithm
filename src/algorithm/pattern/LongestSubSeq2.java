package algorithm.pattern;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class LongestSubSeq2 {
	
	/*
	é¢˜ç›®ï¼šæ‰¾ä¸¤ä¸ªå­—ç¬¦ä¸²çš„æœ€å¤§å…±æœ‰å­?åº?åˆ—ã€‚
	å­—ç¬¦ä¸²S1å’Œå­—ç¬¦ä¸²S2å…±æœ‰å­?åº?åˆ—Zæ˜¯æŒ‡ï¼šZä¸­æ‰€æœ‰å­—ç¬¦éƒ½åœ¨S1ä¸ŽS2ä¸­å‡ºçŽ°ï¼Œå¹¶ä¸”Zçš„å­—ç¬¦é¡ºåº?ä¸Žå®ƒä»¬å‡ºçŽ°åœ¨S1å’ŒS2ä¸­æ—¶å…ˆå?Žé¡ºåº?ä¸€è‡´ï¼Œä½†Zä¸?å¿…æ˜¯S1å’ŒS2çš„è¿žç»­å­?ä¸²ã€‚
	æ‰¾å‡ºæœ€å¤§å…±æœ‰åº?åˆ—å°±æ˜¯æ‰¾å‡ºæœ€é•¿çš„Z 
	 */
	private int recursiveCount = 0;
	
	public static void main(String[] args) {
		LongestSubSeq2 ins = new LongestSubSeq2();
		List<String> longest = ins.getLongestSubSeq("aq12we34r5q5w6er", "a1f23j4q5w5keruq6wder");
		Iterator<String> it = longest.iterator();
		System.out.println("recursive call count for method 1: " + ins.recursiveCount);
		while(it.hasNext()) {
			System.out.println(it.next());
		}
		
		ins.recursiveCount = 0;
		longest = ins.getLongestSubSeq2("aq12we34r5q5w6er", "a1f23j4q5w5keruq6wder");
		it = longest.iterator();
		System.out.println("recursive call count for method 2: " + ins.recursiveCount);
		while(it.hasNext()) {
			System.out.println(it.next());
		}
	}
	
	/*
	æ–¹æ³•1: æ•ˆçŽ‡å·®
	å…³é”®ï¼š
	- å¦‚æžœS1çš„æœ€å?Žä¸€ä¸ªå­—ç¬¦å’ŒS2çš„æœ€å?Žä¸€ä¸ªå­—ç¬¦ç›¸ç­‰ï¼Œé‚£ä¹ˆç»“æžœå°±æ˜¯æœ€å?Žä¸€ä¸ªå­—ç¬¦+åŽ»é™¤æœ€å?Žä¸€ä¸ªå­—ç¬¦çš„S1å’ŒS2çš„æœ€å¤§å…±æœ‰åº?åˆ—
	- å¦‚æžœS1çš„æœ€å?Žä¸€ä¸ªå­—ç¬¦å’ŒS2çš„æœ€å?Žä¸€ä¸ªå­—ç¬¦ä¸?ç›¸ç­‰ï¼Œé‚£ä¹ˆå°±è¿‡å°±æ˜¯longestï¼ˆS1ï¼ŒS2åŽ»é™¤æœ€å?Žä¸€ä¸ªå­—ç¬¦ï¼‰ä¸Žlongestï¼ˆS1åŽ»é™¤æœ€å?Žä¸€ä¸ªå­—ç¬¦ï¼ŒS2ï¼‰ä¸­é•¿çš„é‚£ä¸ªï¼›
	ç”¨é€’å½’å?¯ä»¥è§£å†³.
	ä¸ºä»€ä¹ˆä»Žæœ€å?Žä¸€ä¸ªå­—ç¬¦çš„ç›¸ç­‰å¼€å§‹ï¼Ÿå› ä¸ºå¦‚æžœæœ€å?Žå­—ç¬¦ç›¸ç­‰ï¼Œé‚£å®ƒå¿…å®šæ˜¯æœ€é•¿å…±æœ‰åº?åˆ—çš„æœ€å?Žä¸€ä¸ªï¼Œè¿™ç‚¹å¾ˆå…³é”®
	*/
	private List<String> getLongestSubSeq(String s1, String s2){
		List<String> results = new ArrayList<String>();
		if(s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
			return results;
		}
		
		this.recursiveCount++;
		
		List<String> subResult = null;
		if(s1.charAt(s1.length() - 1) == s2.charAt(s2.length() - 1)) {
			subResult = this.getLongestSubSeq(s1.substring(0, s1.length()-1), s2.substring(0,s2.length()-1));
			
		}else {
			List<String> subResults1 = this.getLongestSubSeq(s1, s2.substring(0, s2.length()-1));
			List<String> subResults2 = this.getLongestSubSeq(s1.substring(0, s1.length()-1), s2);
			if(subResults1.size() == 0) {
				subResult = subResults2;
			}else if(subResults2.size() == 0) {
				subResult = subResults1;
			}else {
				if(subResults1.get(0).length() > subResults2.get(0).length()) {
					subResult = subResults1;
				}else if(subResults1.get(0).length() < subResults2.get(0).length()) {
					subResult = subResults2;
				}else {
					subResult = subResults1;
					subResult.addAll(subResults2);
				}
			}
		}
		
		String subfix = "";
		if(s1.charAt(s1.length() - 1) == s2.charAt(s2.length() - 1)) {
			subfix = s1.substring(s1.length()-1);
		}
		
		if(subResult.size() == 0) {
			results.add(subfix);
		}else {
			Iterator<String> it = subResult.iterator();
			while(it.hasNext()) {
				String subStr = it.next() + subfix;
				results.add(subStr);
			}
		}
		
		return results;
	}
	
	/*
	æ–¹æ³•äºŒï¼šæ•ˆçŽ‡é«˜
	åœ¨æ–¹æ³•ä¸€çš„åŸºç¡€ä¸Šï¼Œæˆ‘ä»¬ä¼šå?‘çŽ°å­—åº?åˆ—longestï¼ˆS1åŽ»é™¤æœ€å?Žä¸€ä¸ªå­—ç¬¦ï¼ŒS2åŽ»é™¤æœ€å?Žä¸€ä¸ªå­—ç¬¦ï¼‰ä¼šè¢«é‡?å¤?è®¡ç®—ï¼Œé?žå¸¸è€—æ—¶ï¼Œé‚£ä¹ˆå?¯ä¸?å?¯ä»¥æŠŠè®¡ç®—ç»“æžœè®°ä¸‹æ?¥é?¿å…?ï¼Ÿ
	 */
	private Map<String, List<String>> cachedResult = new HashMap();
	private List<String> getLongestSubSeq2(String s1, String s2){
		List<String> results = new ArrayList<String>();
		if(s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
			return results;
		}
		
		List<String> resultFromCache = this.cachedResult.get((s1.length() - 1) + "+" + (s2.length()-1));
		if(resultFromCache != null) {
			return resultFromCache;
		}
		
		this.recursiveCount++;
		
		List<String> subResult = null;
		if(s1.charAt(s1.length() - 1) == s2.charAt(s2.length() - 1)) {
			subResult = this.getLongestSubSeq2(s1.substring(0, s1.length()-1), s2.substring(0,s2.length()-1));
			
		}else {
			List<String> subResults1 = this.getLongestSubSeq2(s1, s2.substring(0, s2.length()-1));
			List<String> subResults2 = this.getLongestSubSeq2(s1.substring(0, s1.length()-1), s2);
			if(subResults1.size() == 0) {
				subResult = subResults2;
			}else if(subResults2.size() == 0) {
				subResult = subResults1;
			}else {
				if(subResults1.get(0).length() > subResults2.get(0).length()) {
					subResult = subResults1;
				}else if(subResults1.get(0).length() < subResults2.get(0).length()) {
					subResult = subResults2;
				}else {
					subResult = subResults1;
					subResult.addAll(subResults2);
				}
			}
		}
		
		String subfix = "";
		if(s1.charAt(s1.length() - 1) == s2.charAt(s2.length() - 1)) {
			subfix = s1.substring(s1.length()-1);
		}
		
		if(subResult.size() == 0) {
			results.add(subfix);
		}else {
			Iterator<String> it = subResult.iterator();
			while(it.hasNext()) {
				String subStr = it.next() + subfix;
				results.add(subStr);
			}
		}
		this.cachedResult.put((s1.length() -1) + "+" + (s2.length()-1) , results);
		return results;
	}
}
